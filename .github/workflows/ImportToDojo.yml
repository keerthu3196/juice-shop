name: DevOps Guardrails

on: [push]

jobs:

  sonarqube:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: Generate SonarQube JSON Report
        run: |
          curl --request GET --url '${{ secrets.SONAR_HOST_URL }}/api/issues/search?components=OWASP-Juice' --header 'Authorization: Bearer ${{ secrets.SONARQUBE_TOKEN }}' -o ${{github.workspace}}/sonar_report.json
          
      - name: Push SonarQube Report to DefectDojo
        run: |
          curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/import-scan/' -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" -H 'accept: application/json' -H 'Content-Type: multipart/form-data'  -F 'engagement_name=SonarQube Results'   -F 'scan_type=SonarQube Scan' -F 'deduplication_on_engagement=true'  -F 'auto_create_context=true' -F 'product_name=OWASP Juice' -F 'file=@${{github.workspace}}/sonar_report.json;type=application/json' 


  dependency-check:
    name: Dependency-Check
    runs-on: ubuntu-latest
    steps: 
      - name: Download OWASP Dependency Check
        run: |
          VERSION=$(curl -s https://jeremylong.github.io/DependencyCheck/current.txt)
          curl -sL "https://github.com/jeremylong/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip" --output dependency-check.zip
          unzip dependency-check.zip
      - name: Run Dependency Check
        run: |
          ./dependency-check/bin/dependency-check.sh --out app-dependency-check-report.html --scan .
          rm -rf dependency-check*
      - name: Push Dependency Check Report to DefectDojo
        run: |
          curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/import-scan/' -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" -H 'accept: application/json' -H 'Content-Type: multipart/form-data'  -F 'engagement_name=Dependency Check Scan Report'  -F 'scan_type=Dependency Check Scan' -F 'deduplication_on_engagement=true'  -F 'auto_create_context=true' -F 'product_name=OWASP Juice' -F 'file=@${{github.workspace}}/app-dependency-check-report.html;type=text/html' 
   
  zap-scan:
      name: ZAP-Check
      runs-on: ubuntu-latest
      steps:
        - name: ZAP Scan
          uses: zaproxy/action-baseline@v0.13.0
          with:
            token: ${{ secrets.GIT_TOKEN }}
            docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
            target: 'https://preview.owasp-juice.shop'
            rules_file_name: '.zap/rules.tsv'
            cmd_options: '-x report.xml -a'
            
        - name: Upload ZAP Report
          uses: actions/upload-artifact@v4
          with:
              name: zap-report
              path: report.xml
        
        - name: Push Dependency Check Report to DefectDojo
          run: |
            curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/import-scan/' -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" -H 'accept: application/json' -H 'Content-Type: multipart/form-data'  -F 'engagement_name=ZAP Scan Report'  -F 'scan_type=Dependency Check Scan' -F 'deduplication_on_engagement=true'  -F 'auto_create_context=true' -F 'product_name=OWASP Juice' -F 'file=@$report.xml;type=text/html' 
