name: DevOps Guardrails

on: [push]

jobs:
  defectdojo:
    name: Defect Dojo
    runs-on: ubuntu-latest
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Check if the product exists in DefectDojo
        id: api_request
        run: |
          curl -X 'GET' '${{ secrets.DOJO_URL }}/api/v2/products/?name=OWASP%20Juice' -H 'accept: application/json'  -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" > product_details.json
          count=$(jq '.count' product_details.json)
          echo $count
          if [ $count -eq 0 ];then
            cat engagements.json
            curl -X 'POST' 'http://44.202.143.213:8080/api/v2/engagements/' -H 'accept: application/json'   -H 'Content-Type: multipart/form-data' -H "Authorization: Token bf940f3afce3a965fcc393a304d5ec1ab7975d21" -F 'name=SonarQube Results'  -F 'target_start=$(date +'%Y-%m-%d')' -F 'target_end=$(date +'%Y-%m-%d')' -F 'deduplication_on_engagement=true' -F 'product=10' -F 'engagement_type=Interactive' -F 'description=SonarQube Results'
            product_id=$(jq '.id' create_product.json)
            cat create_product.json
            echo product_id=$product_id >> $GITHUB_OUTPUT
          else
            echo product_id=$(jq '.results[0].id' product_details.json) >> $GITHUB_OUTPUT
          fi
          
      - name: Check for engagements in the product
        id: get_product
        run:  |
          curl -X 'GET' '${{ secrets.DOJO_URL }}/api/v2/engagements/?product=${{steps.api_request.outputs.product_id}}' -H 'accept: application/json' -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" > engagements.json
          engagement_count=$(jq '.count' engagements.json)
          if [ $engagement_count -eq 0 ];then
            curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/engagements/' -H 'accept: application/json'   -H 'Content-Type: multipart/form-data' -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" -F 'name=SonarQube Results'  -F 'target_start=${{steps.get_product.outputs.current_date}}' -F 'target_end=${{steps.get_product.outputs.current_date}}' -F 'deduplication_on_engagement=true' -F 'product=${{steps.get_product.outputs.product_id}}' -F 'engagement_type=Interactive' -F 'description=SonarQube Results' > sonar_engagement.json
            cat sonar_engagement.json
            echo sonar_qube_id=$(jq '.results[0].id' sonar_engagement.json) >> $GITHUB_OUTPUT
            curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/engagements/' -H 'accept: application/json'  -H 'Content-Type: multipart/form-data' \
            -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" \
            -F 'name=Dependency Check Results'  -F 'target_start="$(date +'%Y-%m-%d')"' \
            -F 'target_end="$(date +'%Y-%m-%d')"' \
            -F 'deduplication_on_engagement=true' \
            -F 'product=${{steps.get_product.outputs.product_id}}' \
            -F 'engagement_type=Interactive' \
            -F 'description=Dependency Check Results' > dependency_check_engagement.json
            echo dependenct_check_id=$(jq '.results[0].id' dependency_check_engagement.json) >> $GITHUB_OUTPUT
            curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/engagements/' -H 'accept: application/json' -H  -H 'Content-Type: multipart/form-data' \
            -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" \
            -F 'name=ZAP Scan Results'  -F 'target_start="$(date +'%Y-%m-%d')"' \
            -F 'target_end="$(date +'%Y-%m-%d')"' \
            -F 'deduplication_on_engagement=true' \
            -F 'product=${{steps.get_product.outputs.product_id}}' \
            -F 'engagement_type=Interactive' \
            -F 'description=ZAP Scan Results' > zap_engagement.json
            echo zap_id=$(jq '.results[0].id' zap_engagement.json) >> $GITHUB_OUTPUT
          else
            curl -X 'GET'   '${{ secrets.DOJO_URL }}/api/v2/engagements/?name=SonarQube%20Scan&product=${{steps.api_request.outputs.product_id}}'   -H 'accept: application/json'  -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" > sonar_engagement.json
            echo sonar_qube_id=$(jq '.results[0].id' sonar_engagement.json) >> $GITHUB_OUTPUT
            curl -X 'GET'   '${{ secrets.DOJO_URL }}/api/v2/engagements/?name=Dependency%20Check%20Scan&product=${{steps.api_request.outputs.product_id}}'   -H 'accept: application/json'  -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" > dependency_check_engagement.json
            echo dependenct_check_id=$(jq '.results[0].id' dependency_check_engagement.json) >> $GITHUB_OUTPUT
            curl -X 'GET'   '${{ secrets.DOJO_URL }}/api/v2/engagements/?name=ZAP%20Scan&product=${{steps.api_request.outputs.product_id}}'   -H 'accept: application/json'  -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" > zap_engagement.json
            echo zap_id=$(jq '.results[0].id' zap_engagement.json)" >> $GITHUB_OUTPUT
          fi
          
    
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: Generate SonarQube JSON Report
        run: |
          curl --request GET --url '${{ secrets.SONAR_HOST_URL }}/api/issues/search?components=OWASP-Juice' --header 'Authorization: Bearer ${{ secrets.SONARQUBE_TOKEN }}' -o ${{github.workspace}}/sonar_report.json


      - name: Push SonarQube Report to DefectDojo
        run: |
          curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/import-scan/' -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" -H 'accept: application/json' -H 'Content-Type: multipart/form-data'  -F 'engagement=${{steps.get_product_id.outputs.sonar_qube_id}}'   -F 'scan_type=SonarQube Scan' -F 'deduplication_on_engagement=true' -F 'auto_create_context=true' -F 'file=@${{github.workspace}}/sonar_report.json;type=application/json' 


  dependency-check:
    name: Dependency-Check
    runs-on: ubuntu-latest
    steps: 
      - name: Download OWASP Dependency Check
        run: |
          VERSION=$(curl -s https://jeremylong.github.io/DependencyCheck/current.txt)
          curl -sL "https://github.com/jeremylong/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip" --output dependency-check.zip
          unzip dependency-check.zip
      - name: Run Dependency Check
        run: |
          ./dependency-check/bin/dependency-check.sh --out app-dependency-check-report.html --scan .
          rm -rf dependency-check*
      - name: Push Dependency Check Report to DefectDojo
        run: |
          curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/import-scan/' -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" -H 'accept: application/json' -H 'Content-Type: multipart/form-data'  -F 'engagement=${{steps.get_product_id.outputs.dependency_check_id}}'   -F 'scan_type=Dependency Check Scan' -F 'deduplication_on_engagement=true'  -F 'auto_create_context=true' -F 'file=@${{github.workspace}}/app-dependency-check-report.html;type=text/html' 
   
  zap-scan:
      name: ZAP-Check
      runs-on: ubuntu-latest
      steps:
        - name: ZAP Scan
          uses: zaproxy/action-baseline@v0.13.0
          with:
            token: ${{ secrets.GIT_TOKEN }}
            docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
            target: 'https://preview.owasp-juice.shop'
            rules_file_name: '.zap/rules.tsv'
            cmd_options: '-x report.xml -a -I'
            
        - name: Upload ZAP Report
          uses: actions/upload-artifact@v4
          with:
              name: zap-report
              path: report.xml
        
        - name: Push Dependency Check Report to DefectDojo
          run: |
            curl -X 'POST' '${{ secrets.DOJO_URL }}/api/v2/import-scan/' -H "Authorization: Token ${{secrets.DOJO_API_KEY}}" -H 'accept: application/json' -H 'Content-Type: multipart/form-data'  -F 'engagement=${{steps.get_product_id.outputs.zap_id}}'   -F 'scan_type=Dependency Check Scan' -F 'deduplication_on_engagement=true'  -F 'auto_create_context=true' -F 'file=@$report.xml;type=text/html' 
